/**
 * 
 */
package flotr2jf.options;


/**
 * Flotr2 Defaults
 * <pre> 
 * xaxis: {
 *    ticks: null,           // => format: either [1, 3] or [[1, 'a'], 3]
 *    minorTicks: null,      // => format: either [1, 3] or [[1, 'a'], 3]
 *    showLabels: true,      // => setting to true will show the axis ticks labels, hide otherwise
 *    showMinorLabels: false,// => true to show the axis minor ticks labels, false to hide
 *    labelsAngle: 0,        // => labels' angle, in degrees
 *    title: null,           // => axis title
 *    titleAngle: 0,         // => axis title's angle, in degrees
 *    noTicks: 5,            // => number of ticks for automagically generated ticks
 *    minorTickFreq: null,   // => number of minor ticks between major ticks for autogenerated ticks
 *    tickFormatter: Flotr.defaultTickFormatter, // => fn: number, Object -> string
 *    tickDecimals: null,    // => no. of decimals, null means auto
 *    min: null,             // => min. value to show, null means set automatically
 *    max: null,             // => max. value to show, null means set automatically
 *    autoscale: false,      // => Turns autoscaling on with true
 *    autoscaleMargin: 0,    // => margin in % to add if auto-setting min/max
 *    color: null,           // => color of the ticks
 *    mode: 'normal',        // => can be 'time' or 'normal'
 *    timeFormat: null,
 *    scaling: 'linear',     // => Scaling, can be 'linear' or 'logarithmic'
 *    base: Math.E,
 *    titleAlign: 'center',
 *    margin: true           // => Turn off margins with false
 *    },
 *    x2axis: {},
 *  yaxis: {
 *    ticks: null,           // => format: either [1, 3] or [[1, 'a'], 3]
 *    minorTicks: null,      // => format: either [1, 3] or [[1, 'a'], 3]
 *    showLabels: true,      // => setting to true will show the axis ticks labels, hide otherwise
 *    showMinorLabels: false,// => true to show the axis minor ticks labels, false to hide
 *    labelsAngle: 0,        // => labels' angle, in degrees
 *    title: null,           // => axis title
 *    titleAngle: 90,        // => axis title's angle, in degrees
 *    noTicks: 5,            // => number of ticks for automagically generated ticks
 *    minorTickFreq: null,   // => number of minor ticks between major ticks for autogenerated ticks
 *    tickFormatter: Flotr.defaultTickFormatter, // => fn: number, Object -> string
 *    tickDecimals: null,    // => no. of decimals, null means auto
 *    min: null,             // => min. value to show, null means set automatically
 *    max: null,             // => max. value to show, null means set automatically
 *    autoscale: false,      // => Turns autoscaling on with true
 *    autoscaleMargin: 0,    // => margin in % to add if auto-setting min/max
 *    color: null,           // => The color of the ticks
 *    scaling: 'linear',     // => Scaling, can be 'linear' or 'logarithmic'
 *    base: Math.E,
 *    titleAlign: 'center',
 *    margin: true           // => Turn off margins with false
 *    },
 *  y2axis: {
 *    titleAngle: 270
 *  }</pre>
 */
public class Axis extends flotjf.options.Axis {
	private String minorTicks;
	private Boolean showLabels;
	private Boolean showMinorLabels;
	private Integer labelsAngle;
	private String title;
	private Integer titleAngle;
	private Integer noTicks;
	private Integer minorTickFreq;
	private Boolean autoscale;
	private String timeFormat;
	private String scaling;
	private String base;
	private String titleAlign;
	private String margin;

	/**
	 * 
	 */
	public Axis() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @return the minorTicks
	 */
	public String getMinorTicks() {
		return minorTicks;
	}

	/**
	 * Format: either [1, 3] or [[1, 'a'], 3].<br>
	 * Default:<br>
	 * minorTicks: null
	 * @param minorTicks String or null. (null = use default value)
	 */
	public void setMinorTicks(String minorTicks) {
		this.minorTicks = minorTicks;
	}

	/**
	 * @return the showLabels
	 */
	public Boolean getShowLabels() {
		return showLabels;
	}

	/**
	 * Setting to true will show the axis ticks labels, hide otherwise<br>
	 * Default:<br>
	 * showLabels: true
	 * @param showLabels true, false or null. (null = use default value)
	 */
	public void setShowLabels(Boolean showLabels) {
		this.showLabels = showLabels;
	}

	/**
	 * @return the showMinorLabels
	 */
	public Boolean getShowMinorLabels() {
		return showMinorLabels;
	}

	/**
	 * True to show the axis minor ticks labels, false to hide.<br>
	 * Default:<br>
	 * showMinorLabels: false
	 * @param showMinorLabels true, false or null. (null = use default value)
	 */
	public void setShowMinorLabels(Boolean showMinorLabels) {
		this.showMinorLabels = showMinorLabels;
	}

	/**
	 * @return the labelsAngle
	 */
	public Integer getLabelsAngle() {
		return labelsAngle;
	}

	/**
	 * Labels' angle, in degrees.<br>
	 * <b>Note:</b> If setting the angle, <i>HtmlText</i> needs to be set to <i>false</i>.<br>
	 * Default:<br>
	 * labelsAngle: 0 
	 * @param labelsAngle Integer or null. (null = use default value)
	 */
	public void setLabelsAngle(Integer labelsAngle) {
		this.labelsAngle = labelsAngle;
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Axis title.<br>
	 * Default:<br>
	 * title: null 
	 * @param title String or null. (null = user default value)
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * @return the titleAngle
	 */
	public Integer getTitleAngle() {
		return titleAngle;
	}

	/**
	 * Axis title's angle, in degrees.<br>
	 * <b>Note:</b> If setting the angle, <i>HtmlText</i> needs to be set to <i>false</i>.<br>
	 * Default:<br>
	 * titleAngle: 0
	 * @param titleAngle Integer or null. (null = use default value)
	 */
	public void setTitleAngle(Integer titleAngle) {
		this.titleAngle = titleAngle;
	}

	/**
	 * @return the noTicks
	 */
	public Integer getNoTicks() {
		return noTicks;
	}

	/**
	 * Number of ticks for automagically generated ticks.<br>
	 * Default:<br>
	 * noTicks: 5 
	 * @param noTicks Integer or null. (null = use default value)
	 */
	public void setNoTicks(Integer noTicks) {
		this.noTicks = noTicks;
	}

	/**
	 * @return the minorTickFreq
	 */
	public Integer getMinorTickFreq() {
		return minorTickFreq;
	}

	/**
	 * Number of minor ticks between major ticks for autogenerated ticks.<br>
	 * Default:<br>
	 * minorTickFreq: null
	 * @param minorTickFreq Integer or null. (null = use default value)
	 */
	public void setMinorTickFreq(Integer minorTickFreq) {
		this.minorTickFreq = minorTickFreq;
	}

	/**
	 * @return the autoscale
	 */
	public Boolean getAutoscale() {
		return autoscale;
	}

	/**
	 * Turns autoscaling on with true.<br>
	 * Default:<br>
	 * autoscale: false
	 * @param autoscale true, false or null. (null = use default value)
	 */
	public void setAutoscale(Boolean autoscale) {
		this.autoscale = autoscale;
	}

	/**
	 * @return the timeFormat
	 */
	public String getTimeFormat() {
		return timeFormat;
	}

	/**
	 * <B>Note:</b> This setting is only valid for x axis.<br> 
	 * Default:<br>
	 * timeFormat: null
	 * @param timeFormat true, false or null. (null = use default value)
	 */
	public void setTimeFormat(String timeFormat) {
		this.timeFormat = timeFormat;
	}

	/**
	 * @return the scaling
	 */
	public String getScaling() {
		return scaling;
	}

	/**
	 * Scaling, can be 'linear' or 'logarithmic'.<br>
	 * Default:<br>
	 * scaling: 'linear'
	 * @param scaling String or null. (null = user default value)
	 */
	public void setScaling(String scaling) {
		this.scaling = scaling;
	}

	/**
	 * @return the base
	 */
	public String getBase() {
		return base;
	}

	/**
	 * Default:<br>
	 * base: Math.E
	 * @param base String or null. (null = user default value)
	 */
	public void setBase(String base) {
		this.base = base;
	}

	/**
	 * @return the titleAlign
	 */
	public String getTitleAlign() {
		return titleAlign;
	}

	/**
	 * Default:<br>
	 * titleAlign: 'center'
	 * @param titleAlign String or null. (null = user default value)
	 */
	public void setTitleAlign(String titleAlign) {
		this.titleAlign = titleAlign;
	}

	/**
	 * @return the margin
	 */
	public String getMargin() {
		return margin;
	}

	/**
	 * Turn off margins with false.<br>
	 * Default:<br>
	 * margin: true
	 * @param margin String or null. (null = user default value)
	 */
	public void setMargin(String margin) {
		this.margin = margin;
	}

}
